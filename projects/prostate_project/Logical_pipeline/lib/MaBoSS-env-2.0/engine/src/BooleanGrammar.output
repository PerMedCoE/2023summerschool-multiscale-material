Grammar

    0 $accept: translation_unit $end

    1 translation_unit: node_decl
    2                 | translation_unit node_decl

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' '}'
    5          | IDENTIFIER ':' expression term_opt

    6 node_decl_item_list: node_decl_item
    7                    | node_decl_item_list node_decl_item

    8 node_decl_item: IDENTIFIER '=' expression ';'
    9               | IDENTIFIER '=' STRING ';'

   10 primary_expression: IDENTIFIER
   11                   | '@' IDENTIFIER
   12                   | VARIABLE
   13                   | INTEGER
   14                   | DOUBLE
   15                   | '(' expression ')'

   16 postfix_expression: primary_expression

   17 unary_expression: postfix_expression
   18                 | '+' unary_expression
   19                 | '-' unary_expression
   20                 | '!' unary_expression
   21                 | LOGNOT unary_expression

   22 multiplicative_expression: unary_expression
   23                          | multiplicative_expression '*' unary_expression
   24                          | multiplicative_expression '/' unary_expression

   25 additive_expression: multiplicative_expression
   26                    | additive_expression '+' multiplicative_expression
   27                    | additive_expression '-' multiplicative_expression

   28 relational_expression: additive_expression
   29                      | relational_expression '<' additive_expression
   30                      | relational_expression '>' additive_expression
   31                      | relational_expression LTEQ additive_expression
   32                      | relational_expression GTEQ additive_expression

   33 equality_expression: relational_expression
   34                    | equality_expression EQUAL relational_expression
   35                    | equality_expression NOT_EQUAL relational_expression

   36 logical_and_expression: equality_expression
   37                       | logical_and_expression LOGAND equality_expression

   38 logical_or_expression: logical_and_expression
   39                      | logical_or_expression LOGOR logical_and_expression

   40 logical_xor_expression: logical_or_expression
   41                       | logical_xor_expression LOGXOR logical_or_expression
   42                       | logical_xor_expression '^' logical_or_expression

   43 conditional_expression: logical_xor_expression
   44                       | logical_xor_expression '?' expression ':' conditional_expression

   45 expression: conditional_expression

   46 term_opt: /* empty */
   47         | ';'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 20
'(' (40) 15
')' (41) 15
'*' (42) 23
'+' (43) 18 26
'-' (45) 19 27
'/' (47) 24
':' (58) 5 44
';' (59) 8 9 47
'<' (60) 29
'=' (61) 8 9
'>' (62) 30
'?' (63) 44
'@' (64) 11
'^' (94) 42
'{' (123) 3 4
'}' (125) 3 4
error (256)
IDENTIFIER (258) 3 4 5 8 9 10 11
VARIABLE (259) 12
STRING (260) 9
DOUBLE (261) 14
INTEGER (262) 13
LOGAND (263) 37
LOGOR (264) 39
LOGXOR (265) 41
LOGNOT (266) 21
EQUAL (267) 34
NOT_EQUAL (268) 35
NODE (269) 3 4
GTEQ (270) 32
LTEQ (271) 31


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
translation_unit (35)
    on left: 1 2, on right: 0 2
node_decl (36)
    on left: 3 4 5, on right: 1 2
node_decl_item_list (37)
    on left: 6 7, on right: 3 7
node_decl_item (38)
    on left: 8 9, on right: 6 7
primary_expression (39)
    on left: 10 11 12 13 14 15, on right: 16
postfix_expression (40)
    on left: 16, on right: 17
unary_expression (41)
    on left: 17 18 19 20 21, on right: 18 19 20 21 22 23 24
multiplicative_expression (42)
    on left: 22 23 24, on right: 23 24 25 26 27
additive_expression (43)
    on left: 25 26 27, on right: 26 27 28 29 30 31 32
relational_expression (44)
    on left: 28 29 30 31 32, on right: 29 30 31 32 33 34 35
equality_expression (45)
    on left: 33 34 35, on right: 34 35 36 37
logical_and_expression (46)
    on left: 36 37, on right: 37 38 39
logical_or_expression (47)
    on left: 38 39, on right: 39 40 41 42
logical_xor_expression (48)
    on left: 40 41 42, on right: 41 42 43 44
conditional_expression (49)
    on left: 43 44, on right: 44 45
expression (50)
    on left: 45, on right: 5 8 15 44
term_opt (51)
    on left: 46 47, on right: 5


state 0

    0 $accept: . translation_unit $end

    IDENTIFIER  shift, and go to state 1
    NODE        shift, and go to state 2

    translation_unit  go to state 3
    node_decl         go to state 4


state 1

    5 node_decl: IDENTIFIER . ':' expression term_opt

    ':'  shift, and go to state 5


state 2

    3 node_decl: NODE . IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE . IDENTIFIER '{' '}'

    IDENTIFIER  shift, and go to state 6


state 3

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . node_decl

    $end        shift, and go to state 7
    IDENTIFIER  shift, and go to state 1
    NODE        shift, and go to state 2

    node_decl  go to state 8


state 4

    1 translation_unit: node_decl .

    $default  reduce using rule 1 (translation_unit)


state 5

    5 node_decl: IDENTIFIER ':' . expression term_opt

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 27
    logical_xor_expression     go to state 28
    conditional_expression     go to state 29
    expression                 go to state 30


state 6

    3 node_decl: NODE IDENTIFIER . '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER . '{' '}'

    '{'  shift, and go to state 31


state 7

    0 $accept: translation_unit $end .

    $default  accept


state 8

    2 translation_unit: translation_unit node_decl .

    $default  reduce using rule 2 (translation_unit)


state 9

   10 primary_expression: IDENTIFIER .

    $default  reduce using rule 10 (primary_expression)


state 10

   12 primary_expression: VARIABLE .

    $default  reduce using rule 12 (primary_expression)


state 11

   14 primary_expression: DOUBLE .

    $default  reduce using rule 14 (primary_expression)


state 12

   13 primary_expression: INTEGER .

    $default  reduce using rule 13 (primary_expression)


state 13

   21 unary_expression: LOGNOT . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 32


state 14

   11 primary_expression: '@' . IDENTIFIER

    IDENTIFIER  shift, and go to state 33


state 15

   15 primary_expression: '(' . expression ')'

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 27
    logical_xor_expression     go to state 28
    conditional_expression     go to state 29
    expression                 go to state 34


state 16

   18 unary_expression: '+' . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 35


state 17

   19 unary_expression: '-' . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 36


state 18

   20 unary_expression: '!' . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 37


state 19

   16 postfix_expression: primary_expression .

    $default  reduce using rule 16 (postfix_expression)


state 20

   17 unary_expression: postfix_expression .

    $default  reduce using rule 17 (unary_expression)


state 21

   22 multiplicative_expression: unary_expression .

    $default  reduce using rule 22 (multiplicative_expression)


state 22

   23 multiplicative_expression: multiplicative_expression . '*' unary_expression
   24                          | multiplicative_expression . '/' unary_expression
   25 additive_expression: multiplicative_expression .

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 25 (additive_expression)


state 23

   26 additive_expression: additive_expression . '+' multiplicative_expression
   27                    | additive_expression . '-' multiplicative_expression
   28 relational_expression: additive_expression .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41

    $default  reduce using rule 28 (relational_expression)


state 24

   29 relational_expression: relational_expression . '<' additive_expression
   30                      | relational_expression . '>' additive_expression
   31                      | relational_expression . LTEQ additive_expression
   32                      | relational_expression . GTEQ additive_expression
   33 equality_expression: relational_expression .

    GTEQ  shift, and go to state 42
    LTEQ  shift, and go to state 43
    '<'   shift, and go to state 44
    '>'   shift, and go to state 45

    $default  reduce using rule 33 (equality_expression)


state 25

   34 equality_expression: equality_expression . EQUAL relational_expression
   35                    | equality_expression . NOT_EQUAL relational_expression
   36 logical_and_expression: equality_expression .

    EQUAL      shift, and go to state 46
    NOT_EQUAL  shift, and go to state 47

    $default  reduce using rule 36 (logical_and_expression)


state 26

   37 logical_and_expression: logical_and_expression . LOGAND equality_expression
   38 logical_or_expression: logical_and_expression .

    LOGAND  shift, and go to state 48

    $default  reduce using rule 38 (logical_or_expression)


state 27

   39 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   40 logical_xor_expression: logical_or_expression .

    LOGOR  shift, and go to state 49

    $default  reduce using rule 40 (logical_xor_expression)


state 28

   41 logical_xor_expression: logical_xor_expression . LOGXOR logical_or_expression
   42                       | logical_xor_expression . '^' logical_or_expression
   43 conditional_expression: logical_xor_expression .
   44                       | logical_xor_expression . '?' expression ':' conditional_expression

    LOGXOR  shift, and go to state 50
    '^'     shift, and go to state 51
    '?'     shift, and go to state 52

    $default  reduce using rule 43 (conditional_expression)


state 29

   45 expression: conditional_expression .

    $default  reduce using rule 45 (expression)


state 30

    5 node_decl: IDENTIFIER ':' expression . term_opt

    ';'  shift, and go to state 53

    $default  reduce using rule 46 (term_opt)

    term_opt  go to state 54


state 31

    3 node_decl: NODE IDENTIFIER '{' . node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' . '}'

    IDENTIFIER  shift, and go to state 55
    '}'         shift, and go to state 56

    node_decl_item_list  go to state 57
    node_decl_item       go to state 58


state 32

   21 unary_expression: LOGNOT unary_expression .

    $default  reduce using rule 21 (unary_expression)


state 33

   11 primary_expression: '@' IDENTIFIER .

    $default  reduce using rule 11 (primary_expression)


state 34

   15 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 59


state 35

   18 unary_expression: '+' unary_expression .

    $default  reduce using rule 18 (unary_expression)


state 36

   19 unary_expression: '-' unary_expression .

    $default  reduce using rule 19 (unary_expression)


state 37

   20 unary_expression: '!' unary_expression .

    $default  reduce using rule 20 (unary_expression)


state 38

   23 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 60


state 39

   24 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression  go to state 19
    postfix_expression  go to state 20
    unary_expression    go to state 61


state 40

   26 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 62


state 41

   27 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 63


state 42

   32 relational_expression: relational_expression GTEQ . additive_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 64


state 43

   31 relational_expression: relational_expression LTEQ . additive_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 65


state 44

   29 relational_expression: relational_expression '<' . additive_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 66


state 45

   30 relational_expression: relational_expression '>' . additive_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 67


state 46

   34 equality_expression: equality_expression EQUAL . relational_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 68


state 47

   35 equality_expression: equality_expression NOT_EQUAL . relational_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 69


state 48

   37 logical_and_expression: logical_and_expression LOGAND . equality_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 70


state 49

   39 logical_or_expression: logical_or_expression LOGOR . logical_and_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 71


state 50

   41 logical_xor_expression: logical_xor_expression LOGXOR . logical_or_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 72


state 51

   42 logical_xor_expression: logical_xor_expression '^' . logical_or_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 73


state 52

   44 conditional_expression: logical_xor_expression '?' . expression ':' conditional_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 27
    logical_xor_expression     go to state 28
    conditional_expression     go to state 29
    expression                 go to state 74


state 53

   47 term_opt: ';' .

    $default  reduce using rule 47 (term_opt)


state 54

    5 node_decl: IDENTIFIER ':' expression term_opt .

    $default  reduce using rule 5 (node_decl)


state 55

    8 node_decl_item: IDENTIFIER . '=' expression ';'
    9               | IDENTIFIER . '=' STRING ';'

    '='  shift, and go to state 75


state 56

    4 node_decl: NODE IDENTIFIER '{' '}' .

    $default  reduce using rule 4 (node_decl)


state 57

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list . '}'
    7 node_decl_item_list: node_decl_item_list . node_decl_item

    IDENTIFIER  shift, and go to state 55
    '}'         shift, and go to state 76

    node_decl_item  go to state 77


state 58

    6 node_decl_item_list: node_decl_item .

    $default  reduce using rule 6 (node_decl_item_list)


state 59

   15 primary_expression: '(' expression ')' .

    $default  reduce using rule 15 (primary_expression)


state 60

   23 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 23 (multiplicative_expression)


state 61

   24 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 24 (multiplicative_expression)


state 62

   23 multiplicative_expression: multiplicative_expression . '*' unary_expression
   24                          | multiplicative_expression . '/' unary_expression
   26 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 26 (additive_expression)


state 63

   23 multiplicative_expression: multiplicative_expression . '*' unary_expression
   24                          | multiplicative_expression . '/' unary_expression
   27 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39

    $default  reduce using rule 27 (additive_expression)


state 64

   26 additive_expression: additive_expression . '+' multiplicative_expression
   27                    | additive_expression . '-' multiplicative_expression
   32 relational_expression: relational_expression GTEQ additive_expression .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41

    $default  reduce using rule 32 (relational_expression)


state 65

   26 additive_expression: additive_expression . '+' multiplicative_expression
   27                    | additive_expression . '-' multiplicative_expression
   31 relational_expression: relational_expression LTEQ additive_expression .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41

    $default  reduce using rule 31 (relational_expression)


state 66

   26 additive_expression: additive_expression . '+' multiplicative_expression
   27                    | additive_expression . '-' multiplicative_expression
   29 relational_expression: relational_expression '<' additive_expression .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41

    $default  reduce using rule 29 (relational_expression)


state 67

   26 additive_expression: additive_expression . '+' multiplicative_expression
   27                    | additive_expression . '-' multiplicative_expression
   30 relational_expression: relational_expression '>' additive_expression .

    '+'  shift, and go to state 40
    '-'  shift, and go to state 41

    $default  reduce using rule 30 (relational_expression)


state 68

   29 relational_expression: relational_expression . '<' additive_expression
   30                      | relational_expression . '>' additive_expression
   31                      | relational_expression . LTEQ additive_expression
   32                      | relational_expression . GTEQ additive_expression
   34 equality_expression: equality_expression EQUAL relational_expression .

    GTEQ  shift, and go to state 42
    LTEQ  shift, and go to state 43
    '<'   shift, and go to state 44
    '>'   shift, and go to state 45

    $default  reduce using rule 34 (equality_expression)


state 69

   29 relational_expression: relational_expression . '<' additive_expression
   30                      | relational_expression . '>' additive_expression
   31                      | relational_expression . LTEQ additive_expression
   32                      | relational_expression . GTEQ additive_expression
   35 equality_expression: equality_expression NOT_EQUAL relational_expression .

    GTEQ  shift, and go to state 42
    LTEQ  shift, and go to state 43
    '<'   shift, and go to state 44
    '>'   shift, and go to state 45

    $default  reduce using rule 35 (equality_expression)


state 70

   34 equality_expression: equality_expression . EQUAL relational_expression
   35                    | equality_expression . NOT_EQUAL relational_expression
   37 logical_and_expression: logical_and_expression LOGAND equality_expression .

    EQUAL      shift, and go to state 46
    NOT_EQUAL  shift, and go to state 47

    $default  reduce using rule 37 (logical_and_expression)


state 71

   37 logical_and_expression: logical_and_expression . LOGAND equality_expression
   39 logical_or_expression: logical_or_expression LOGOR logical_and_expression .

    LOGAND  shift, and go to state 48

    $default  reduce using rule 39 (logical_or_expression)


state 72

   39 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   41 logical_xor_expression: logical_xor_expression LOGXOR logical_or_expression .

    LOGOR  shift, and go to state 49

    $default  reduce using rule 41 (logical_xor_expression)


state 73

   39 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   42 logical_xor_expression: logical_xor_expression '^' logical_or_expression .

    LOGOR  shift, and go to state 49

    $default  reduce using rule 42 (logical_xor_expression)


state 74

   44 conditional_expression: logical_xor_expression '?' expression . ':' conditional_expression

    ':'  shift, and go to state 78


state 75

    8 node_decl_item: IDENTIFIER '=' . expression ';'
    9               | IDENTIFIER '=' . STRING ';'

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    STRING      shift, and go to state 79
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 27
    logical_xor_expression     go to state 28
    conditional_expression     go to state 29
    expression                 go to state 80


state 76

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}' .

    $default  reduce using rule 3 (node_decl)


state 77

    7 node_decl_item_list: node_decl_item_list node_decl_item .

    $default  reduce using rule 7 (node_decl_item_list)


state 78

   44 conditional_expression: logical_xor_expression '?' expression ':' . conditional_expression

    IDENTIFIER  shift, and go to state 9
    VARIABLE    shift, and go to state 10
    DOUBLE      shift, and go to state 11
    INTEGER     shift, and go to state 12
    LOGNOT      shift, and go to state 13
    '@'         shift, and go to state 14
    '('         shift, and go to state 15
    '+'         shift, and go to state 16
    '-'         shift, and go to state 17
    '!'         shift, and go to state 18

    primary_expression         go to state 19
    postfix_expression         go to state 20
    unary_expression           go to state 21
    multiplicative_expression  go to state 22
    additive_expression        go to state 23
    relational_expression      go to state 24
    equality_expression        go to state 25
    logical_and_expression     go to state 26
    logical_or_expression      go to state 27
    logical_xor_expression     go to state 28
    conditional_expression     go to state 81


state 79

    9 node_decl_item: IDENTIFIER '=' STRING . ';'

    ';'  shift, and go to state 82


state 80

    8 node_decl_item: IDENTIFIER '=' expression . ';'

    ';'  shift, and go to state 83


state 81

   44 conditional_expression: logical_xor_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 44 (conditional_expression)


state 82

    9 node_decl_item: IDENTIFIER '=' STRING ';' .

    $default  reduce using rule 9 (node_decl_item)


state 83

    8 node_decl_item: IDENTIFIER '=' expression ';' .

    $default  reduce using rule 8 (node_decl_item)
